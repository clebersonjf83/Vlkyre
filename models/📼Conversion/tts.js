("‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ ŒΩ‚Ñì–∫—É—è—î –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé");
// ‚ïî‚ßâ‡ºª [ ùêïùê•ùê§ùê≤ùê´ùêûüïäÔ∏èùêåùêÆùê•ùê≠ùê¢ùêÉùêûùêØùê¢ùêúùêû ùêÄùêèùêà ] ùê¢ùê¨ ùêö ùêñùê°ùêöùê≠ùê¨ùêöùê©ùê© ùêåùêÆùê•ùê≠ùê¢ùêèùêÆùê´ùê©ùê®ùê¨ùêû-ùêîùê¨ùêûùê´ùêõùê®ùê≠ ùê∞ùê¢ùê≠ùê° ùêåùê®ùêùùêûùê´ùêöùê≠ùê¢ùê®ùêß,ùêÄùêÆùê≠ùê®ùê¶ùêöùê≠ùê¢ùê®ùêß ùêöùêßùêù ùüèùüéùüé+ ùê¶ùê®ùê´ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨!
// ‚ïë üêûùêÉùêûùêØùêûùê•ùê®ùê©ùêûùê´ùê¨ +918436686758,917430922909
// ‚ïë
// ‚ïë We won't be responsible for any kind of ban due to this bot.
// ‚ïë ŒΩ‚Ñì–∫—É—è—î was made for fun purpose and to make group management easier.
// ‚ïë It's your concern if you spam and gets your account banned.
// ‚ïë Also, Forks won't be entertained.
// ‚ïë If you fork this repo and edit plugins, it's your concern for further updates.
// ‚ïë Forking Repo is fine. But if you edit something we will not provide any help.
// ‚ïë In short, Fork At Your Own Risk.
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
("‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ ŒΩ‚Ñì–∫—É—è—î –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé");
require("../../global.js");
const ppath = require("path");
const psname = ppath.basename(__filename);
const pfname = psname.slice(0, -3).toLowerCase();
module.exports = async (ŒΩ‚Ñì–∫—É—è—î, ŒΩ‚Ñì–∫hat, update, store) => {
  try {
    if (!ŒΩ‚Ñì–∫—É—è—î.args) {
      await ŒΩ‚Ñì–∫—É—è—î.sendMessage(ŒΩ‚Ñì–∫hat.chat, {
        react: {
          text: "‚ùå",
          key: ŒΩ‚Ñì–∫hat.key,
        },
      });
      return ŒΩ‚Ñì–∫hat.reply(
        `*üò•Sorry:* _${ŒΩ‚Ñì–∫—É—è—î.pushname || ŒΩ‚Ñì–∫—É—è—î.Tname}_

*‚ùåError* 
> _Could not find any text and code in context!_

*‚ö°Usage* 
> _${ŒΩ‚Ñì–∫—É—è—î.prefix}${pfname} text | language-code_`
      );
    }
    ("‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ ŒΩ‚Ñì–∫—É—è—î –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé");
    let text = "";
    let langCode = "en";
    for (var i = 0; i < ŒΩ‚Ñì–∫—É—è—î.args.length; i++) {
      if (ŒΩ‚Ñì–∫—É—è—î.args[i] == `=`) {
        langCode = ŒΩ‚Ñì–∫—É—è—î.args[i + 1];
        break;
      }
      text += ŒΩ‚Ñì–∫—É—è—î.args[i] + " ";
    }
    if (text.length > 200) {
      await ŒΩ‚Ñì–∫—É—è—î.sendMessage(ŒΩ‚Ñì–∫hat.chat, {
        react: {
          text: "‚ùå",
          key: ŒΩ‚Ñì–∫hat.key,
        },
      });
      return ŒΩ‚Ñì–∫hat.reply(
        `*üò•Sorry:* _${ŒΩ‚Ñì–∫—É—è—î.pushname || ŒΩ‚Ñì–∫—É—è—î.Tname}_

*‚ùåError* 
> _Total characters should be less than 200!_

*‚ö°Usage* 
> _${ŒΩ‚Ñì–∫—É—è—î.prefix}${pfname} text | language-code_`
      );
      ("‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ ŒΩ‚Ñì–∫—É—è—î –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé");
    } else {
      ŒΩ‚Ñì–∫—É—è—î
        .axios({
          method: "get",
          url:
            "https://magneum.vercel.app/api/text2speech?q=" +
            ŒΩ‚Ñì–∫—É—è—î.args.join(" "),
          headers: {
            accept: "*/*",
            "accept-language": "en-US,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          },
        })
        .then(async (response) => {
          var mData = response.data;
          console.log(mData);
          return await ŒΩ‚Ñì–∫—É—è—î.sendMessage(
            ŒΩ‚Ñì–∫hat.chat,
            {
              audio: { url: mData.meta.url },
              mimetype: "audio/mpeg",
              fileName: "TalkToSpeech" + ".mp3",
              headerType: 4,
              contextInfo: {
                externalAdReply: {
                  title: "üì¢Talk To Speech",
                  body: "‚ù£Ô∏èMade by xhadr.",
                  renderLargerThumbnail: true,
                  mediaUrl: "https://i.postimg.cc/qBSnwdzq/White.png",
                  mediaType: 1,
                  thumbnail: await ŒΩ‚Ñì–∫—É—è—î.getBuffer(
                    "https://i.postimg.cc/qBSnwdzq/White.png"
                  ),
                  sourceUrl: "https://bit.ly/xhadr",
                },
              },
            },
            { quoted: ŒΩ‚Ñì–∫hat }
          );
        });
    }
    ("‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ ŒΩ‚Ñì–∫—É—è—î –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé");
  } catch (error) {
    return ŒΩ‚Ñì–∫—É—è—î.grab(ŒΩ‚Ñì–∫—É—è—î, ŒΩ‚Ñì–∫hat, error);
  }
};
